'use strict';

exports.__esModule = true;
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp, _initialiseProps;

var _PrivateFunctions = require('./PrivateFunctions');

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TaskRunner = (_temp = _class = function TaskRunner() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TaskRunner);

    _initialiseProps.call(this);

    var concurrency = config.concurrency,
        onAdd = config.onAdd,
        onStart = config.onStart,
        onDone = config.onDone,
        onEnd = config.onEnd,
        otherConfig = _objectWithoutProperties(config, ['concurrency', 'onAdd', 'onStart', 'onDone', 'onEnd']);

    this.config = _extends({
        autoStart: true,
        name: 'Runner ' + ++TaskRunner.runnerCount
    }, otherConfig);

    this.setConcurrency(concurrency);
    this.onAdd = (0, _util.assignFunction)(onAdd);
    this.onStart = (0, _util.assignFunction)(onStart);
    this.onDone = (0, _util.assignFunction)(onDone);
    this.onEnd = (0, _util.assignFunction)(onEnd);

    Object.seal(this);
}, _class.runnerCount = 0, _initialiseProps = function _initialiseProps() {
    var _this = this;

    this.__working = false;
    this.tasks = {
        list: [],
        total: 0,
        completed: 0,
        running: 0
    };
    this.duration = {
        start: 0,
        end: 0,
        total: 0
    };

    this.isBusy = function () {
        return _this.__working;
    };

    this.setConcurrency = function (concurrency) {
        concurrency = parseInt(concurrency, 10);
        if (!(0, _util.isNumber)(concurrency)) {
            console.warn(_log2.default.call(_this, 'concurrency_not_a_number'));
        }

        if (concurrency < 0) {
            concurrency = Math.abs(concurrency);
            console.warn(_log2.default.call(_this, 'concurrency_should_be_positive_integer'));
        }

        _this.concurrency = (0, _util.assignNumber)(concurrency, 3, _this.tasks.total);
        if (_this.__working) {
            _PrivateFunctions.runPending.call(_this);
        }
    };

    this.start = function () {
        if (_this.__working) {
            console.warn(_log2.default.call(_this, 'already_running'));
            return false;
        }

        if (_this.config.autoStart) {
            console.warn(_log2.default.call(_this, 'auto_start_true'));
            return false;
        }

        _PrivateFunctions.startCheck.call(_this);
        _PrivateFunctions.runPending.call(_this);
        return true;
    };

    this.add = function (task) {
        var first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if ((0, _util.isFunction)(task)) {
            var autoStart = _this.config.autoStart;


            if (first) {
                _this.tasks.list.push(task);
            } else {
                _this.tasks.list.unshift(task);
            }

            _this.tasks.total++;
            if (autoStart) {
                _PrivateFunctions.startCheckAndRun.call(_this);
            }

            _PrivateFunctions.addCheck.call(_this);
            return true;
        }

        throw new TypeError((0, _log2.default)('add_requires_function'));
    };

    this.addFirst = function (task) {
        _this.add(task, true);
    };

    this.addMultiple = function (tasks, first) {
        if ((0, _util.isArray)(tasks) && tasks.every(function (t) {
            return (0, _util.isFunction)(t);
        })) {
            var autoStart = _this.config.autoStart;


            _this.tasks = _extends({}, _this.tasks, {
                list: first ? [].concat(tasks, _this.tasks.list) : [].concat(_this.tasks.list, tasks),
                total: _this.tasks.total + tasks.length
            });

            if (autoStart) {
                _PrivateFunctions.startCheckAndRun.call(_this);
            }

            _PrivateFunctions.addCheck.call(_this);
            return true;
        }

        throw new TypeError(_log2.default.call(_this, 'add_multiple_requires_array_of_functions'));
    };

    this.addMultipleFirst = function (tasks) {
        _this.addMultiple(tasks, first);
    };

    this.remove = function () {
        var first = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        var task = first ? _this.tasks.list.shift() : _this.tasks.list.pop();
        _this.tasks.total = _this.tasks.list.length + _this.tasks.completed;
        _PrivateFunctions.removeCheck.call(_this);
        return task;
    };

    this.removeFirst = function () {
        _this.remove(true);
    };

    this.removeAt = function (index) {
        var task = _this.tasks.list.splice(index, 1);
        _this.tasks.total = _this.tasks.list.length + _this.tasks.completed;
        _PrivateFunctions.removeCheck.call(_this);
        return task;
    };

    this.removeAll = function () {
        _this.tasks.list = [];
        _this.tasks.total = _this.tasks.completed;
        _PrivateFunctions.removeCheck.call(_this);
        return _this.tasks.list;
    };
}, _temp);
exports.default = TaskRunner;
module.exports = exports['default'];