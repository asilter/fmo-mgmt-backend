/*!
 * concurrent-tasks v1.0.7 - https://concurrent-tasks.js.org
 * MIT Licensed
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["TaskRunner"] = factory();
	else
		root["TaskRunner"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/util.js
var isFunction = function isFunction(item) {
    return typeof item === 'function';
};
var isNumber = function isNumber(item) {
    return typeof item === 'number' && !isNaN(item);
};
var isString = function isString(item) {
    return typeof item === 'string';
};
var isArray = function isArray(item) {
    return item.constructor === Array;
};
var isEmptyString = function isEmptyString(item) {
    return isString(item) && !item;
};

var assignFunction = function assignFunction(item) {
    if (isFunction(item)) {
        return item;
    }
};

var assignNumber = function assignNumber(number, defaultNumber, listLength) {
    if (isNumber(number)) {
        if (number === 0) {
            return listLength;
        }

        return number;
    }

    return defaultNumber;
};
// CONCATENATED MODULE: ./src/PrivateFunctions.js


function run() {
    if (this.tasks.list.length) {
        if (this.tasks.running < this.concurrency) {
            this.tasks.list.shift()(done.bind(this));
            this.tasks.running++;
        }
    } else {
        if (this.tasks.completed === this.tasks.total) {
            this.duration.end = Date.now();
            this.duration.total = this.duration.end - this.duration.start;
            this.__working = false;
            if (isFunction(this.onEnd)) {
                var completed = this.tasks.completed,
                    duration = this.duration;

                this.onEnd({ completed: completed, duration: duration });
            }
        }
    }
}

function done() {
    this.tasks.completed++;
    this.tasks.running--;
    this.duration.total = Date.now() - this.duration.start;
    if (isFunction(this.onDone)) {
        this.onDone(this.tasks);
    }
    run.call(this);
}

function startCheck() {
    if (!this.__working) {
        this.duration.start = Date.now();
        this.__working = true;
        if (isFunction(this.onStart)) {
            var duration = this.duration;

            this.onStart({ duration: duration });
        }
    }
}

function addCheck() {
    if (isFunction(this.onAdd)) {
        var tasks = this.tasks;

        this.onAdd({ tasks: tasks });
    }
}

function removeCheck() {
    if (isFunction(this.onRemove)) {
        var tasks = this.tasks;

        this.onRemove({ tasks: tasks });
    }
}

function startCheckAndRun() {
    startCheck.call(this);
    run.call(this);
}

function runPending() {
    if (this.tasks.running < this.concurrency) {
        var concurrency = this.concurrency === Infinity ? this.tasks.list.length : this.concurrency;
        for (var i = this.tasks.running; i < concurrency; i++) {
            run.call(this);
        }
    }
}
// CONCATENATED MODULE: ./src/log.js
var logs = {
    already_running: 'Cannot start TaskRunner instance as it is already running!',
    auto_start_true: 'Cannot programmatically start TaskRunner instance as autoStart is true!',
    add_requires_function: 'The "add" operation requires a function. Check if the first argument is a function!',
    add_multiple_requires_array_of_functions: 'The "addMultiple" operation requires an array of functions. Check if the first argument is an array and whether all the items in the array are functions!',
    concurrency_not_a_number: 'Concurrency should be a positive number. Defaulting to 3.',
    concurrency_should_be_positive_integer: 'Concurrency should be a positive integer. Seems like you have supplied a negative value!'
};

/* harmony default export */ var log = (function (logKey) {
    return '[TaskRunner]' + this.config.name + ': ' + logs[logKey];
});
// CONCATENATED MODULE: ./src/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return src_TaskRunner; });


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp, src_initialiseProps;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }






var src_TaskRunner = (_temp = _class = function TaskRunner() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TaskRunner);

    src_initialiseProps.call(this);

    var concurrency = config.concurrency,
        onAdd = config.onAdd,
        onStart = config.onStart,
        onDone = config.onDone,
        onEnd = config.onEnd,
        otherConfig = _objectWithoutProperties(config, ['concurrency', 'onAdd', 'onStart', 'onDone', 'onEnd']);

    this.config = _extends({
        autoStart: true,
        name: 'Runner ' + ++TaskRunner.runnerCount
    }, otherConfig);

    this.setConcurrency(concurrency);
    this.onAdd = assignFunction(onAdd);
    this.onStart = assignFunction(onStart);
    this.onDone = assignFunction(onDone);
    this.onEnd = assignFunction(onEnd);

    Object.seal(this);
}, _class.runnerCount = 0, src_initialiseProps = function _initialiseProps() {
    var _this = this;

    this.__working = false;
    this.tasks = {
        list: [],
        total: 0,
        completed: 0,
        running: 0
    };
    this.duration = {
        start: 0,
        end: 0,
        total: 0
    };

    this.isBusy = function () {
        return _this.__working;
    };

    this.setConcurrency = function (concurrency) {
        concurrency = parseInt(concurrency, 10);
        if (!isNumber(concurrency)) {
            console.warn(log.call(_this, 'concurrency_not_a_number'));
        }

        if (concurrency < 0) {
            concurrency = Math.abs(concurrency);
            console.warn(log.call(_this, 'concurrency_should_be_positive_integer'));
        }

        _this.concurrency = assignNumber(concurrency, 3, _this.tasks.total);
        if (_this.__working) {
            runPending.call(_this);
        }
    };

    this.start = function () {
        if (_this.__working) {
            console.warn(log.call(_this, 'already_running'));
            return false;
        }

        if (_this.config.autoStart) {
            console.warn(log.call(_this, 'auto_start_true'));
            return false;
        }

        startCheck.call(_this);
        runPending.call(_this);
        return true;
    };

    this.add = function (task) {
        var first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (isFunction(task)) {
            var autoStart = _this.config.autoStart;


            if (first) {
                _this.tasks.list.push(task);
            } else {
                _this.tasks.list.unshift(task);
            }

            _this.tasks.total++;
            if (autoStart) {
                startCheckAndRun.call(_this);
            }

            addCheck.call(_this);
            return true;
        }

        throw new TypeError(log('add_requires_function'));
    };

    this.addFirst = function (task) {
        _this.add(task, true);
    };

    this.addMultiple = function (tasks, first) {
        if (isArray(tasks) && tasks.every(function (t) {
            return isFunction(t);
        })) {
            var autoStart = _this.config.autoStart;


            _this.tasks = _extends({}, _this.tasks, {
                list: first ? [].concat(tasks, _this.tasks.list) : [].concat(_this.tasks.list, tasks),
                total: _this.tasks.total + tasks.length
            });

            if (autoStart) {
                startCheckAndRun.call(_this);
            }

            addCheck.call(_this);
            return true;
        }

        throw new TypeError(log.call(_this, 'add_multiple_requires_array_of_functions'));
    };

    this.addMultipleFirst = function (tasks) {
        _this.addMultiple(tasks, first);
    };

    this.remove = function () {
        var first = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        var task = first ? _this.tasks.list.shift() : _this.tasks.list.pop();
        _this.tasks.total = _this.tasks.list.length + _this.tasks.completed;
        removeCheck.call(_this);
        return task;
    };

    this.removeFirst = function () {
        _this.remove(true);
    };

    this.removeAt = function (index) {
        var task = _this.tasks.list.splice(index, 1);
        _this.tasks.total = _this.tasks.list.length + _this.tasks.completed;
        removeCheck.call(_this);
        return task;
    };

    this.removeAll = function () {
        _this.tasks.list = [];
        _this.tasks.total = _this.tasks.completed;
        removeCheck.call(_this);
        return _this.tasks.list;
    };
}, _temp);


/***/ })
/******/ ])["default"];
});